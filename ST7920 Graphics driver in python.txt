# ST7920 Graphics driver in python
# By Bob Davis
# 07/23/2016
 
import RPi.GPIO as GPIO
import time

# GPIO lines
LCD_RS=7
LCD_E =8
LCD_D4=25
LCD_D5=24
LCD_D6=23
LCD_D7=18
GPIO.setmode(GPIO.BCM)

# Define some device constants
LCD_WIDTH = 16 # Maximum characters

# Timing constant
E_DELAY = 0.0005

# MCP3008 lines
GPIO.setup(8, GPIO.OUT)  # CE0
GPIO.setup(9, GPIO.IN)   # MISO
GPIO.setup(10, GPIO.OUT) # MOSI 
GPIO.setup(11, GPIO.OUT) # Sclock

image =[ # Left side is 0
  0x7f, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, #Line1
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x3e,
  0x49, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, #line2
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x41,
  0x49, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, #line3
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x01, 0x49,
  0x49, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, #line4
  0x00, 0x00, 0x08, 0x00, 0x49, 0x00, 0x01, 0x49,
  0x36, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, #line5
  0x00, 0x00, 0x2a, 0x00, 0x49, 0x00, 0xff, 0x7a,
  0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, #line6
  0x00, 0x00, 0x1c, 0x00, 0x49, 0x00, 0x01, 0x00,
  0x3e, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x00, 0x00, #line7
  0x00, 0x00, 0x7f, 0x00, 0x49, 0x00, 0x01, 0x7f,
  0x41, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, #line8
  0x00, 0x00, 0x1c, 0x00, 0x49, 0x00, 0x00, 0x09,
  0x41, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xf0, 0x00, #line9
  0x00, 0x00, 0x2a, 0x00, 0x49, 0x00, 0x7f, 0x19,
  0x41, 0x00, 0x01, 0xff, 0xff, 0x00, 0xf0, 0x00, #line10
  0x00, 0x00, 0x08, 0x00, 0x49, 0x00, 0x49, 0x29,
  0x3e, 0x00, 0x03, 0xff, 0xff, 0x00, 0xf0, 0x00, #line11
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x49, 0x46,
  0x00, 0x00, 0x07, 0xff, 0xff, 0x00, 0x30, 0x00, #line12
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x49, 0x00,
  0x7f, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x30, 0x00, #line13
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x41, 0x7e,
  0x49, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x30, 0x00, #line14
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x11,
  0x49, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x30, 0x00, #line15
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x46, 0x11,
  0x49, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x30, 0x00, #line16
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x49, 0x11,
  0x36, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x30, 0x00, #line17
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x49, 0x7e,
  0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x30, 0x00, #line18
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x49, 0x00,
  0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x30, 0x00, #line19
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x31, 0x7f,
  0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x30, 0x00, #line20
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x09,
  0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x30, 0x00, #line21
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x01, 0x09,
  0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x30, 0x00, #line22
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x01, 0x06,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x30, 0x00, #line23
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x7f, 0x00,
  0x00, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x30, 0x00, #line24
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x01, 0x00,
  0x7f, 0x00, 0x07, 0xff, 0xff, 0x00, 0x30, 0x00, #line25
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x01, 0x7f,
  0x41, 0x00, 0x03, 0xff, 0xff, 0x00, 0x30, 0x00, #line26
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x08,
  0x41, 0x00, 0x01, 0xff, 0xff, 0x00, 0x30, 0x00, #line27
  0x00, 0x00, 0x00, 0x08, 0x49, 0x00, 0x00, 0x08,
  0x22, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line28
  0x00, 0x00, 0x00, 0x2a, 0x49, 0x00, 0x00, 0x08,
  0x1c, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, #line29
  0x00, 0x00, 0x00, 0x1c, 0x49, 0x00, 0x3f, 0x7f,
  0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, #line30
  0x00, 0x00, 0x00, 0x7f, 0x49, 0x00, 0x00, 0x00,
  0x7e, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line31
  0x00, 0x08, 0x00, 0x1c, 0x49, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line32
  0x00, 0x2a, 0x00, 0x2a, 0x49, 0x00, 0x00, 0x41, #Bottom 
  0x11, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #Line1 
  0x00, 0x1c, 0x00, 0x08, 0x49, 0x00, 0x00, 0x7f,
  0x11, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line2
  0x00, 0x7f, 0x00, 0x00, 0x49, 0x00, 0x00, 0x41,
  0x7e, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line3
  0x00, 0x1c, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line4
  0x00, 0x2a, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x1f, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line5
  0x00, 0x08, 0x00, 0x00, 0x49, 0x00, 0x00, 0x3e,
  0x20, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line6
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x41,
  0x40, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line7
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x41,
  0x20, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line8
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x41,
  0x1f, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line9
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x22,
  0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x30, 0x00, #line10
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x30, 0x00, #line11
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x46,
  0x41, 0x00, 0x03, 0xff, 0xff, 0x00, 0x30, 0x00, #line12
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x49,
  0x7f, 0x00, 0x07, 0xff, 0xff, 0x00, 0x30, 0x00, #line13
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x49,
  0x41, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x30, 0x00, #line14
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x49,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x30, 0x00, #line15
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x31,
  0x46, 0x00, 0x3f, 0xff, 0xff, 0x00, 0xf0, 0x00, #line16
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x49, 0x00, 0x7f, 0xff, 0xff, 0x0f, 0xf0, 0x00, #line17
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x49, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x00, 0x00, #line18
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x31, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x00, 0x00, #line19
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, #line20
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, #line21
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x7f, 0xff, 0xff, 0x00, 0x00, 0x00, #line22
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, #line23
  0x00, 0x00, 0x08, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x1f, 0xff, 0xff, 0x00, 0x00, 0x00, #line24
  0x00, 0x00, 0x2a, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x41, 0x00, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x00, #line25
  0x00, 0x00, 0x1c, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x7f, 0x00, 0x07, 0xff, 0xff, 0x00, 0x00, 0x00, #line26
  0x00, 0x00, 0x7f, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x41, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, #line27
  0x00, 0x00, 0x1c, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00, 0x00, #line28
  0x00, 0x00, 0x2a, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, #line29
  0x00, 0x00, 0x08, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x41, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, #line30
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x7f, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, #line31
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00,
  0x41, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, #line32
  0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00
  ]
 
def main():
  GPIO.setup (LCD_D4, GPIO.OUT)
  GPIO.setup (LCD_D5, GPIO.OUT)
  GPIO.setup (LCD_D6, GPIO.OUT)
  GPIO.setup (LCD_D7, GPIO.OUT)
  GPIO.setup (LCD_RS, GPIO.OUT)
  GPIO.setup (LCD_E, GPIO.OUT)

  # Initialise display
  lcd_init()
  clear_screen()
  load_image()
  
# Clear graphics screen
def clear_screen():
  for y in range(0,32):
    lcd_byte(0x80+y,0) #Y=0
    lcd_byte(0x80,0) #X=0
    for x in range(0,32):
      lcd_byte(0x00,1)

# Display image:
def load_image():
  for y in range(0,32): # Y Top to bottom 
    lcd_byte(0x80+y,0) #Y=0
    lcd_byte(0x80,0) #X=0
    for x in range(0,16): #X Left to Right top half
      lcd_byte(image[(y*16)+x],1)
    for x in range(0,16): #X Left to Right bottom half
      lcd_byte(image[(y*16)+512+x],1)
           
def lcd_init():  # Initialise display
  lcd_byte(0x33,0) #Initialize
  lcd_byte(0x32,0) #Initialize
  lcd_byte(0x28,0) #data length num of lines
  lcd_byte(0x0c,0) #Display on 0f=Cursor on 
  lcd_byte(0x07,0) #move direction
  lcd_byte(0x01,0) #clear display

  lcd_byte(0x24,0) #Extended mode
  lcd_byte(0x26,0) #Graphics mode
  lcd_byte(0x80,0) #Y=0
  lcd_byte(0x80,0) #X=0

def lcd_byte(data, mode):
  # Send byte to data pins 1=data 0=command
  GPIO.output(LCD_RS, mode) # RS

 # High bits
  GPIO.output(LCD_D4, data&0x10!=0)
  GPIO.output(LCD_D5, data&0x20!=0)
  GPIO.output(LCD_D6, data&0x40!=0)
  GPIO.output(LCD_D7, data&0x80!=0)

  # Toggle 'Enable' pin
  time.sleep(E_DELAY)    
  GPIO.output(LCD_E, True)  
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, False)  

  # Low bits
  GPIO.output(LCD_D4, data&0x01!=0)
  GPIO.output(LCD_D5, data&0x02!=0)
  GPIO.output(LCD_D6, data&0x04!=0)
  GPIO.output(LCD_D7, data&0x08!=0)

  # Toggle 'Enable' pin
  time.sleep(E_DELAY)    
  GPIO.output(LCD_E, True)  
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, False)  
 
if __name__ == '__main__':
  main()
#end
