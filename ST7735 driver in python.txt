# ST7735 driver in python
# By Bob Davis
# Adapted from code on the Internet
 
import RPi.GPIO as GPIO
import spidev           
import time
import sys

RS=23   # Data/Control Ao
RST=24  # Reset
SCE=8   # CS
SCLK=11 # SCLK Clock
DIN=10  # SDA MOSI
spi = spidev.SpiDev()

# MCP3008 ALTERNATE lines
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.OUT) # Replaces CE0
GPIO.setup(18, GPIO.IN)  # Replaces MISO
GPIO.setup(27, GPIO.OUT) # Replaces MOSI 
GPIO.setup(22, GPIO.OUT) # Replaces Sclock

font = { #Reduced font set UC and Numbers
  ' ': [0x00, 0x00, 0x00, 0x00, 0x00],
  '/': [0x20, 0x10, 0x08, 0x04, 0x02],
  '0': [0x3e, 0x51, 0x49, 0x45, 0x3e],
  '1': [0x00, 0x42, 0x7f, 0x40, 0x00],
  '2': [0x42, 0x61, 0x51, 0x49, 0x46],
  '3': [0x21, 0x41, 0x45, 0x4b, 0x31],
  '4': [0x18, 0x14, 0x12, 0x7f, 0x10],
  '5': [0x27, 0x45, 0x45, 0x45, 0x39],
  '6': [0x3c, 0x4a, 0x49, 0x49, 0x30],
  '7': [0x01, 0x71, 0x09, 0x05, 0x03],
  '8': [0x36, 0x49, 0x49, 0x49, 0x36],
  '9': [0x06, 0x49, 0x49, 0x29, 0x1e],
  'A': [0x7e, 0x11, 0x11, 0x11, 0x7e],
  'B': [0x7f, 0x49, 0x49, 0x49, 0x36],
  'C': [0x3e, 0x41, 0x41, 0x41, 0x22],
  'D': [0x7f, 0x41, 0x41, 0x22, 0x1c],
  'E': [0x7f, 0x49, 0x49, 0x49, 0x41],
  'F': [0x7f, 0x09, 0x09, 0x09, 0x01],
  'G': [0x3e, 0x41, 0x49, 0x49, 0x7a],
  'H': [0x7f, 0x08, 0x08, 0x08, 0x7f],
  'I': [0x00, 0x41, 0x7f, 0x41, 0x00],
  'J': [0x20, 0x40, 0x41, 0x3f, 0x01],
  'K': [0x7f, 0x08, 0x14, 0x22, 0x41],
  'L': [0x7f, 0x40, 0x40, 0x40, 0x40],
  'M': [0x7f, 0x02, 0x0c, 0x02, 0x7f],
  'N': [0x7f, 0x04, 0x08, 0x10, 0x7f],
  'O': [0x3e, 0x41, 0x41, 0x41, 0x3e],
  'P': [0x7f, 0x09, 0x09, 0x09, 0x06],
  'Q': [0x3e, 0x41, 0x51, 0x21, 0x5e],
  'R': [0x7f, 0x09, 0x19, 0x29, 0x46],
  'S': [0x46, 0x49, 0x49, 0x49, 0x31],
  'T': [0x01, 0x01, 0x7f, 0x01, 0x01],
  'U': [0x3f, 0x40, 0x40, 0x40, 0x3f],
  'V': [0x1f, 0x20, 0x40, 0x20, 0x1f],
  'W': [0x3f, 0x40, 0x38, 0x40, 0x3f],
  'X': [0x63, 0x14, 0x08, 0x14, 0x63],
  'Y': [0x07, 0x08, 0x70, 0x08, 0x07],
  'Z': [0x61, 0x51, 0x49, 0x45, 0x43],
  '\\': [0x02, 0x04, 0x08, 0x10, 0x20],
  ':': [0x00, 0x36, 0x36, 0x00, 0x00],
}
 
def init():
  spi.open(0, 0)
  spi.max_speed_hz = 6000000
  GPIO.setmode(GPIO.BCM)
#  GPIO.setwarnings ( False )
  GPIO.setup (RS, GPIO.OUT)
  GPIO.setup (RST, GPIO.OUT)
  Reset()
  Write_cmd ( 0X11 )
  time.sleep ( 0.12 )
  Write_CD (( 0XB1, 0X01, 0X2C, 0X2D ))#Framerate
  Write_CD (( 0XB2, 0X01, 0X2C, 0X2D ))
  Write_CD (( 0XB3, 0X01, 0X2C, 0X2D, 0X01, 0X2C, 0X2D ))
  Write_CD (( 0XB4, 0X07 ))
  Write_CD (( 0XC0, 0XA2, 0X02, 0X84 ))#Power setup
  Write_CD (( 0XC1, 0XC5 ))
  Write_CD (( 0XC2, 0X0A, 0X00 ))
  Write_CD (( 0XC3, 0X8A, 0X2A ))
  Write_CD (( 0XC4, 0X8A, 0XEE ))
  Write_CD (( 0XC5, 0X0E ))
  Write_CD (( 0X36, 0XC8 ))
  Write_CD (( 0XE0, 0X02, 0X1C, 0X07, 0X12, 0X37, 0X32, 0X29, 0X2D, 0X29, 0X25, 0X2B, 0X39, 0X00, 0X01, 0X03, 0X10 ))
  Write_CD (( 0XE1, 0X03, 0X1D, 0X07, 0X06, 0X2E, 0X2C, 0X29, 0X2D, 0X2E, 0X2E, 0X37, 0X3F, 0X00, 0X00, 0X02, 0X10 ))
  Write_CD (( 0X2A, 0X00, 0X00, 0X00, 0X79 ))
  Write_CD (( 0X2B, 0X00, 0X00, 0X00, 0X9f ))
  Write_CD (( 0X3A, 0X06 )) # Mode 06 is R G B
  Write_cmd ( 0X29 )

def Reset (): # Reset Display
  GPIO.output (RST, False )
  time.sleep ( 0.1 )
  GPIO.output (RST, True )
  time.sleep ( 0.1 )

def Write_cmd (cmd): # Write Command
  GPIO.output (RS, False )  # RS = 0
  spi.writebytes([cmd])

def Write_data (Data): # Write data
  GPIO.output (RS, True )   # RS = 1
  spi.writebytes([Data])

def Write_CD (cmd): #Write command followed by data
  if len (cmd) == 0 :
    return
  GPIO.output (RS, False ) # RS = 0
  spi.writebytes ([cmd [ 0 ]])
  GPIO.output (RS, True )  # RS = 1
  spi.writebytes ( list (cmd [ 1 :]))

def Fill (red, green, blue):
  Write_cmd ( 0X2C ) # Next: red, Green, Blue bytes
  GPIO.output (RS, True )  # RS = 1
  pixline = []
  for n in range (384): # Fill screen with white
    if (blue==1):pixline.append (0xff) # Blue       
    else :pixline.append (0x00) # Blue       
    if (green==1):pixline.append (0xff) # Green
    else :pixline.append (0x00) # Green
    if (red==1):pixline.append (0xff) # RED
    else: pixline.append (0x00) # RED
  for n in range (128):   # send data to LCD
    spi.writebytes (pixline [ 0 :])

def goto (x,y):  # go to top/bottom
    Write_CD (( 0X2A, 0X00, x, 0X00, 0X7f  ))
    Write_CD (( 0X2B, 0X00, y, 0X00, 0x9f ))
    Write_cmd ( 0X2C ) # Next: red, Green, Blue bytes
    GPIO.output (RS, True )  # RS = 1 will send data

def Image (filename):
#  GPIO.output ( RS, True ) # RS = 1
  try:  # Prevents crashing when images do not work
    with open(filename, 'rb') as bitmap: # Must be 128
      for x in range ( 168 ):
        pixline = []
        for y in range ( 384 ):
          bitmap.seek(0x36 + x*384 + y) # 36 is header
          Pixel = ord(bitmap.read(1))
          pixline.append (Pixel)
        spi.writebytes (pixline)
  except:
      pass

def text(string, red, green, blue):
  string=string.ljust(21, " ")
  for row in range(10): # 8 rows top to bottom
    pixline = []
    for char in string: # Procees each character in string
      for byte in range(5):
        data=(font[char])  # Load 5 bytes of character
        pix=0
        if (row==0) and (data[byte] & 0x01):pix=1
        if (row==1) and (data[byte] & 0x02):pix=1
        if (row==2) and (data[byte] & 0x04):pix=1
        if (row==3) and (data[byte] & 0x08):pix=1
        if (row==4) and (data[byte] & 0x10):pix=1
        if (row==5) and (data[byte] & 0x20):pix=1
        if (row==6) and (data[byte] & 0x40):pix=1
        if (row==7) and (data[byte] & 0x80):pix=1
        if (row==8):pix=0  # Blank between lines
        if (row==9):pix=0  # Blank between lines
        if (pix==1):       # fill in R/G/B
          if (blue==1): pixline.append (0xff)
          else: pixline.append (0x00)
          if (green==1): pixline.append (0xff)
          else: pixline.append (0x00)
          if (red==1):  pixline.append (0xff)
          else: pixline.append (0x00)
        else:   
            pixline.append (0x00)
            pixline.append (0x00)
            pixline.append (0x00)
      pixline.append (0x00) # blanks btw characters
      pixline.append (0x00)
      pixline.append (0x00)
    for filler in range(6):  # Add 2 blank lines
       pixline.append (0x00) # 6x21=126+2=128
    spi.writebytes(pixline)
    pixline = []

def readport(port): # Alternate pins
  GPIO.output(17, GPIO.HIGH) # deselect chip
  GPIO.output(22, GPIO.LOW) # set clock low
  adcin=0
  for shift in range (0,24): # 24 pits shifted
    GPIO.output(17, GPIO.LOW) # select chip
    GPIO.output(27, GPIO.LOW) # low for most bits
    if (shift==7 or shift==8): 
      GPIO.output(27, GPIO.HIGH)
    if (shift==9)and(port & 0x04): 
      GPIO.output(27, GPIO.HIGH)
    if (shift==10)and(port & 0x02): 
      GPIO.output(27, GPIO.HIGH)
    if (shift==11)and(port & 0x01): 
      GPIO.output(27, GPIO.HIGH)
    if (shift > 13)and(GPIO.input(18)):
      adcin = adcin+1 # set bit
    adcin = adcin << 1  # left shift 1
    GPIO.output(22, GPIO.LOW) # cycle the clock
    GPIO.output(22, GPIO.HIGH) 
  return (adcin)  

def sketch():
  for y in range(0,10000):
    pixline=[]
    analogx=(readport(0)/8)
    analogy=(readport(1)/8)
    analogr=(readport(5)/4)
    analogg=(readport(6)/4)
    analogb=(readport(7)/4)
    if analogx>128:analogx=128
    if analogy>128:analogy=128
    goto (analogx, analogy)
    # Next: RGB bytes
    pixline.append (analogr)
    pixline.append (analogg)
    pixline.append (analogb)
    spi.writebytes(pixline)
  time.sleep(.01)
    
if __name__ == "__main__" :
  init ()
  T1 = time.clock ()
  goto(0,32)
  Fill (1,0,0) # Red
  goto(0,64)
  Fill (0,1,0) # Green
  goto(0,96)
  Fill (0,0,1) # Blue
  goto(0,128)
  Fill (1,1,1) # white
  time.sleep(2)
  goto(0,0)
  Image ("lena.bmp")
  time.sleep(2)
  goto(0,0)
  Image ("RPI-128.bmp")
  time.sleep(2)
  Fill (0,0,0) # black
  sketch()
  
  #Convert time and date to strings
  times=time.strftime('%H:%M:%S')
  dates=time.strftime('%D')
  # Read analog ports
  analog1=(readport(0))  # Range 0-1024 
  analog2=(readport(1))
  analog3=(readport(2))   
  analog4=(readport(3))
  analog5=(readport(4))  # Range 0-1024 
  analog6=(readport(5))
  analog7=(readport(6))   
  analog8=(readport(7))
  goto(0,0)
  text("THIS IS A LCD TEST", 1,0,0) # Red
  text("BY BOB DAVIS II", 0,1,0)  # green
  text("TIME AND DATE", 0,0,1) # Blue
  text(times+" "+dates, 1,1,1)    # white
  text("ANALOG 1 IS "+str(analog1),1,1,1)
  text("ANALOG 2 IS "+str(analog2),1,1,0)
  text("ANALOG 3 IS "+str(analog3),0,1,1)
  text("ANALOG 4 IS "+str(analog4),1,0,1)
  text("ANALOG 5 IS "+str(analog5),1,1,1)
  text("ANALOG 6 IS "+str(analog6),1,1,0)
  text("ANALOG 7 IS "+str(analog7),0,1,1)
  text("ANALOG 8 IS "+str(analog8),1,0,1)
  
  T2 = time.clock ()
  print 'Processing Time:' , str (T2 - T1)



